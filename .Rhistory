ggsave(file.path(outFilePath), FinalPlot, dpi=360, height=18,
width=14, units="in")
}
trainData1 <- read.csv2(file = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/debrujin_runs/train_results.csv",
stringsAsFactors = FALSE, sep=",")
testData1 <- read.csv2(file = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/debrujin_runs/test_results.csv",
stringsAsFactors = FALSE, sep=",")
trainData2 <- read.csv2(file = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/random100_avg/train_results.csv",
stringsAsFactors = FALSE, sep=",")
testData2 <- read.csv2(file = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/random100_avg/test_results.csv",
stringsAsFactors = FALSE, sep=",")
out_dir = getwd()
drawPlots(trainData1, testData1, trainData2, testData2, out_dir, "Timp_rand_100.png", 10)
library(ggplot2)
library(magrittr)
library(dplyr)
library(grid)
library(gridExtra)
source("plotAllResults.R")
# Set plot label and size parameters
plot_title_size = 13
subplot_title_size = 11
axis_label_size = 7
axis_tick_size = 7
legend_size = 3
legend_title_color = "Black"
drawAllPlots <- function(trainData, testData, typeData, out_dir) {
# Process raw data
process_data <- function(rawData){
rawData$Model <- factor(rawData$Model)
rawData$Baccuracy <- as.numeric(rawData$Baccuracy)
rawData$F1 <- as.numeric(rawData$F1)
DataBacc <- rawData[, c(1, 8)]
DataF1 <- rawData[, c(1, 7)]
DataBacc <- DataBacc[order(DataBacc$Baccuracy, decreasing=TRUE), ]
DataF1 <- DataF1[order(DataF1$F1, decreasing=TRUE), ]
return(list(DataBacc, DataF1))
}
out <- process_data(trainData)
trainDataBacc <- out[[1]]
trainDataF1 <- out[[2]]
out <- process_data(testData)
testDataBacc <- out[[1]]
testDataF1 <- out[[2]]
out <- plot_individual_results(trainDataBacc, testDataBacc, "Spread of balanced accuracy for all models on validation data",
"Balanced accuracy on test data", "Balanced accuracy", 2, subplot_title_size, axis_tick_size)
p1 <- out[[1]]
p2 <- out[[2]]
title = "Visualization of balanced accuracy for all models"
x_axis_label = "Balanced accuracy"
y_axis_label = "Model"
grid_title <- textGrob(title, gp = gpar(fontsize = plot_title_size, fontface = 'bold'))
grid_x_label <- textGrob(y_axis_label, hjust = 0.5, vjust=-2.5, gp = gpar(fontsize = axis_label_size, fontface = 'bold'))
grid_y_label <- textGrob(x_axis_label, rot=90, vjust = 1.2, gp = gpar(fontsize = axis_label_size, fontface = 'bold'))
combined_plot <- grid.arrange(grid_title, arrangeGrob(p1, p2, nrow=2), nrow=2, left=grid_y_label,
bottom=grid_x_label, heights=c(0.5, 10))
ggsave(file.path(out_dir, paste(typeData, "AllBacc.png", sep="_")), combined_plot, dpi=360, height=10,
width=12, units="in")
out <- plot_individual_results(trainDataF1, testDataF1, "Spread of F1 scores for all models on validation data",
"F1 score on test data", "F1 score", 2, subplot_title_size, axis_tick_size)
p1 <- out[[1]]
p2 <- out[[2]]
title = "Visualization of F1 score for all models"
x_axis_label = "F1 score"
y_axis_label = "Model"
grid_title <- textGrob(title, gp = gpar(fontsize = plot_title_size, fontface = 'bold'))
grid_x_label <- textGrob(y_axis_label, hjust = 0.5, vjust=-2.5, gp = gpar(fontsize = axis_label_size, fontface = 'bold'))
grid_y_label <- textGrob(x_axis_label, rot=90, vjust = 1.2, gp = gpar(fontsize = axis_label_size, fontface = 'bold'))
combined_plot <- grid.arrange(grid_title, arrangeGrob(p1, p2, nrow=2), nrow=2, left=grid_y_label,
bottom=grid_x_label, heights=c(0.5, 10))
ggsave(file.path(out_dir, paste(typeData, "AllF1.png", sep="_")), combined_plot, dpi=360, height=10,
width=12, units="in")
}
trainData <- read.csv2(file = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/random100_avg/train_results.csv",
stringsAsFactors = FALSE, sep=",")
testData <- read.csv2(file = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/random100_avg/test_results.csv",
stringsAsFactors = FALSE, sep=",")
out_dir = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/random100_avg/"
drawAllPlots(trainData, testData, "rand_100", out_dir)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(grid)
source("plotResults.R")
# Set plot label and size parameters
plot_title_size = 14
subplot_title_size = 13
axis_label_size = 10
axis_tick_size = 11
legend_size = 3
legend_title_color = "Black"
drawPlots <- function(trainData1, testData1, trainData2, testData2, out_dir, out_file, num_top) {
outFileName = ""
outFilePath = file.path(out_dir, out_file)
# trainData <- read.csv2(file = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/debrujin_runs/train_results.csv",
#                        stringsAsFactors = FALSE, sep=",")
#
# testData <- read.csv2(file = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/debrujin_runs/test_results.csv",
#                       stringsAsFactors = FALSE, sep=",")
#
# num_top = 20
select_topN <- function(someData, num_top){
temp = as.vector(unique(someData$Model)[1:num_top])
someData <- someData[someData$Model %in% temp, ]
return(someData)
}
# Process raw data
process_data <- function(rawData, type_data, num_top){
rawData$Model <- factor(rawData$Model)
rawData$Baccuracy <- as.numeric(rawData$Baccuracy)
rawData$F1 <- as.numeric(rawData$F1)
DataBacc <- rawData[, c(1, 8)]
DataF1 <- rawData[, c(1, 7)]
DataBacc <- DataBacc[order(DataBacc$Baccuracy, decreasing=TRUE), ]
DataF1 <- DataF1[order(DataF1$F1, decreasing=TRUE), ]
# Select top models for visualization
if (type_data == "train"){
DataBacc <- select_topN(DataBacc, num_top)
DataF1 <- select_topN(DataF1, num_top)
}
else if (type_data == "test"){
DataBacc <- DataBacc[!duplicated(DataBacc$Model), ]
DataBacc <- DataBacc[1:num_top, ]
DataF1 <- DataF1[!duplicated(DataF1$Model), ]
DataF1 <- DataF1[1:num_top, ]
}
return(list(DataBacc, DataF1))
}
out <- process_data(trainData1, "train", num_top)
debrujin_trainDataBacc <- out[[1]]
debrujin_trainDataF1 <- out[[2]]
out <- process_data(testData1, "test", num_top)
debrujin_testDataBacc <- out[[1]]
debrujin_testDataF1 <- out[[2]]
# source("plotResults.R")
out <- plot_on_grid(debrujin_trainDataBacc, debrujin_testDataBacc, "(A) Balanced accuracy on the validation data",
paste("Boxplots for top", num_top, "models"), "(B) Balanced accuracy on test data",
paste("Balanced accuracy for top", num_top, "models"), "",
"Accuracy", 2, subplot_title_size, axis_label_size, axis_tick_size)
p1 <- out[[1]]
p2 <- out[[2]]
out <- plot_on_grid(debrujin_trainDataF1, debrujin_testDataF1, "(A) F1 score on the validation data",
paste("Boxplots for top", num_top, "models"), "(B) F1 scores on test data",
paste("F1 values for top", num_top, "models"), "",
"F1 score", 2, subplot_title_size, axis_label_size, axis_tick_size)
p3 <- out[[1]]
p4 <- out[[2]]
title = paste("(A) Classification via Debrujin motifs", sep="")
grid_title <- textGrob(title, gp = gpar(fontsize = plot_title_size, fontface = 'bold'))
plot1 <- grid.arrange(grid_title, arrangeGrob(p1, p2, p3, p4, nrow=2, ncol=2), nrow=2, heights=c(0.5, 10))
out <- process_data(trainData2, "train", num_top)
rand_trainDataBacc <- out[[1]]
rand_trainDataF1 <- out[[2]]
out <- process_data(testData2, "test", num_top)
rand_testDataBacc <- out[[1]]
rand_testDataF1 <- out[[2]]
# source("plotResults.R")
out <- plot_on_grid(rand_trainDataBacc, rand_testDataBacc, "(A) Balanced accuracy on the validation data",
paste("Boxplots for top", num_top, "models"), "(B) Balanced accuracy on test data",
paste("Balanced accuracy for top", num_top, "models"), "",
"Accuracy", 2, subplot_title_size, axis_label_size, axis_tick_size)
p5 <- out[[1]]
p6 <- out[[2]]
out <- plot_on_grid(rand_trainDataF1, rand_testDataF1, "(A) F1 score on the validation data",
paste("Boxplots for top", num_top, "models"), "(B) F1 scores on test data",
paste("F1 values for top", num_top, "models"), "",
"F1 score", 2, subplot_title_size, axis_label_size, axis_tick_size)
p7 <- out[[1]]
p8 <- out[[2]]
title = paste("(B) Classification via randomly sampled motifs", sep="")
grid_title <- textGrob(title, gp = gpar(fontsize = plot_title_size, fontface = 'bold'))
plot2 <- grid.arrange(grid_title, arrangeGrob(p5, p6, p7, p8, nrow=2, ncol=2), nrow=2, heights=c(0.5, 10))
FinalPlot <- grid.arrange(plot1, plot2, nrow=2)
# Save the plot on disk
ggsave(file.path(outFilePath), FinalPlot, dpi=360, height=18,
width=14, units="in")
}
trainData1 <- read.csv2(file = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/debrujin_runs/train_results.csv",
stringsAsFactors = FALSE, sep=",")
testData1 <- read.csv2(file = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/debrujin_runs/test_results.csv",
stringsAsFactors = FALSE, sep=",")
trainData2 <- read.csv2(file = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/random100_avg/train_results.csv",
stringsAsFactors = FALSE, sep=",")
testData2 <- read.csv2(file = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/random100_avg/test_results.csv",
stringsAsFactors = FALSE, sep=",")
out_dir = getwd()
drawPlots(trainData1, testData1, trainData2, testData2, out_dir, "Timp_rand_100.png", 10)
data <- Matrix::readMM(file="/Users/schmuck/Downloads/filtered_matrices_mex/hg19/matrix.mtx")
dim(data)
data[1:10, 1:10]
data <- as.data.frame(data
)
data@Dimnames
dim(data@x)
data@x
daat <-  as.data.frame(data@x)
dim(daat)
dim(data)
dim(data@x)
dim(data@i)
dim(data@factors)
length(data@factors)
data@factors
data@j
data@Dim
data <- Matrix::readMM(file="/Users/schmuck/Downloads/filtered_matrices_mex/hg19/matrix.mtx")
d <- data.frame(
i = m@i + 1,  # m@i is 0-based, not 1-based like everything else in R
j = m@j + 1,  # m@j is 0-based, not 1-based like everything else in R
x = m@x
)
data <- data.frame(
i = data@i + 1,  # m@i is 0-based, not 1-based like everything else in R
j = data@j + 1,  # m@j is 0-based, not 1-based like everything else in R
x = data@x
)
dim(data)
data <- Matrix::readMM(file="/Users/schmuck/Downloads/filtered_matrices_mex/hg19/matrix.mtx")
data@i
length(data@i)
length(data@x)
str(data)
data <- Matrix::readMM(file="/Users/schmuck/Downloads/filtered_matrices_mex/hg19/matrix.mtx")
data1 <- data.frame(
i = data@i + 1,  # m@i is 0-based, not 1-based like everything else in R
j = data@j + 1,  # m@j is 0-based, not 1-based like everything else in R
x = data@x
)
data2 <- sparseMatrix(i = data1$i, j = data1$j, x = data1$x, dims = c(32738, 8186))
library("Matrix")
data2 <- sparseMatrix(i = data1$i, j = data1$j, x = data1$x, dims = c(32738, 8186))
data3 <- as.data.frame(data2)
dim(data2)
head(data2)
data3 <- as.data.frame(summary(data2))
dim(data3)
dim(data2)
data2[1:10, 1:10]
data2 <- as(data2, "dgTMatrix")
data2 <- as(data2, "TsparseMatrix")
data3 <- as.data.frame(data2)
data <- Matrix::readMM(file="/Users/schmuck/Downloads/filtered_matrices_mex/hg19/matrix.mtx")
data <- data.frame(
i = data@i + 1,  # m@i is 0-based, not 1-based like everything else in R
j = data@j + 1,  # m@j is 0-based, not 1-based like everything else in R
x = data@x
)
sparseMatrix(i = data$i, j = data$j, x = data$x, dims = c(32738, 8186))
as.data.frame(data)
as.data.frame(summary(data))
dim(data)
head(data)
summary(data)
data <- Matrix::readMM(file="/Users/schmuck/Downloads/filtered_matrices_mex/hg19/matrix.mtx")
data1 <- data.frame(
i = data@i + 1,  # m@i is 0-based, not 1-based like everything else in R
j = data@j + 1,  # m@j is 0-based, not 1-based like everything else in R
x = data@x
)
summary(data1)
data1 <- data.frame(
i = data@i + 1,  # m@i is 0-based, not 1-based like everything else in R
j = data@j + 1,  # m@j is 0-based, not 1-based like everything else in R
x = data@x
)
sparseMatrix(i = data1$i, j = data1$j, x = data1$x, dims = c(32738, 8186))
summary(data1)
data1
matrix_dir = "/Users/schmuck/Downloads/filtered_matrices_mex/hg19"
barcode.path <- paste0(matrix_dir, "barcodes.tsv.gz")
features.path <- paste0(matrix_dir, "features.tsv.gz")
matrix.path <- paste0(matrix_dir, "matrix.mtx.gz")
mat <- readMM(file = matrix.path)
matrix_dir = "/Users/schmuck/Downloads/filtered_matrices_mex/hg19/"
barcode.path <- paste0(matrix_dir, "barcodes.tsv.gz")
features.path <- paste0(matrix_dir, "features.tsv.gz")
matrix.path <- paste0(matrix_dir, "matrix.mtx.gz")
mat <- readMM(file = matrix.path)
matrix_dir = "/Users/schmuck/Downloads/filtered_matrices_mex/"
barcode.path <- paste0(matrix_dir, "barcodes.tsv.gz")
features.path <- paste0(matrix_dir, "features.tsv.gz")
matrix.path <- paste0(matrix_dir, "matrix.mtx")
mat <- readMM(file = matrix.path)
matrix_dir = "/Users/schmuck/Downloads/filtered_matrices_mex/hg19/"
barcode.path <- paste0(matrix_dir, "barcodes.tsv")
features.path <- paste0(matrix_dir, "features.tsv")
matrix.path <- paste0(matrix_dir, "matrix.mtx")
mat <- readMM(file = matrix.path)
feature.names = read.delim(features.path,
header = FALSE,
stringsAsFactors = FALSE)
matrix_dir = "/Users/schmuck/Downloads/filtered_matrices_mex/hg19/"
barcode.path <- paste0(matrix_dir, "barcodes.tsv")
features.path <- paste0(matrix_dir, "genes.tsv")
matrix.path <- paste0(matrix_dir, "matrix.mtx")
mat <- readMM(file = matrix.path)
feature.names = read.delim(features.path,
header = FALSE,
stringsAsFactors = FALSE)
barcode.names = read.delim(barcode.path,
header = FALSE,
stringsAsFactors = FALSE)
colnames(mat) = barcode.names$V1
rownames(mat) = feature.names$V1
dim(mat)
mat[1:10, 1:10]
mat = t(mat)
colnames(mat)[1:10]
rownames(mat)[1:10]
unique(rownames(mat))
write.table(mat, file="32k_cells.csv", row.names = FALSE, col.names = FALSE, sep=",")
large_matrix_to_df <- function(m){
iter = 1
step_size = 5000
output = NULL
while(iter + step_size < ncol(m)){
print(iter)
add_output = data.frame(as.matrix(m[,iter:(iter+step_size-1)]))
if(is.null(output)){
output = add_output
}else{
output = cbind(output,add_output)
}
iter = iter + step_size
}
add_output = data.frame(as.matrix(m[,iter:ncol(m)]))
output = cbind(output,add_output)
return (output)
}
m <- large_matrix_to_df(m)
mat <- large_matrix_to_df(mat)
write.table(mat, file="32k_cells.csv", row.names = FALSE, col.names = FALSE, sep=",")
library(MASS)
library(clusterGeneration)
library(matrixcalc)
library(clusterSim)
?genPositiveDefMat
setwd("~/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/ClassificationPipeline")
library(ggplot2)
library(dplyr)
library(gridExtra)
library(grid)
source("plotResults.R")
# Set plot label and size parameters
plot_title_size = 14
subplot_title_size = 13
axis_label_size = 10
axis_tick_size = 11
legend_size = 3
legend_title_color = "Black"
drawPlots <- function(trainData1, testData1, trainData2, testData2, trainData3, testData3,
out_dir, out_file, num_top) {
outFileName = ""
# outFilePath = file.path(out_dir, out_file)
# trainData <- read.csv2(file = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/debrujin_runs/train_results.csv",
#                        stringsAsFactors = FALSE, sep=",")
#
# testData <- read.csv2(file = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/debrujin_runs/test_results.csv",
#                       stringsAsFactors = FALSE, sep=",")
#
# num_top = 20
select_topN <- function(someData, num_top){
temp = as.vector(unique(someData$Model)[1:num_top])
someData <- someData[someData$Model %in% temp, ]
return(someData)
}
# Process raw data
process_data <- function(rawData, type_data, num_top){
rawData$Model <- factor(rawData$Model)
rawData$Baccuracy <- as.numeric(rawData$Baccuracy)
rawData$F1 <- as.numeric(rawData$F1)
DataBacc <- rawData[, c(1, 8)]
DataF1 <- rawData[, c(1, 7)]
DataBacc <- DataBacc[order(DataBacc$Baccuracy, decreasing=TRUE), ]
DataF1 <- DataF1[order(DataF1$F1, decreasing=TRUE), ]
# Select top models for visualization
if (type_data == "train"){
DataBacc <- select_topN(DataBacc, num_top)
DataF1 <- select_topN(DataF1, num_top)
}
else if (type_data == "test"){
DataBacc <- DataBacc[!duplicated(DataBacc$Model), ]
DataBacc <- DataBacc[1:num_top, ]
DataF1 <- DataF1[!duplicated(DataF1$Model), ]
DataF1 <- DataF1[1:num_top, ]
}
return(list(DataBacc, DataF1))
}
out <- process_data(trainData1, "train", num_top)
debrujin_trainDataBacc <- out[[1]]
debrujin_trainDataF1 <- out[[2]]
out <- process_data(testData1, "test", num_top)
debrujin_testDataBacc <- out[[1]]
debrujin_testDataF1 <- out[[2]]
# source("plotResults.R")
out <- plot_on_grid(debrujin_trainDataBacc, debrujin_testDataBacc, "(1) Balanced accuracy on the validation data",
paste("Boxplots for top", num_top, "models"), "(2) Balanced accuracy on test data",
paste("Balanced accuracy for top", num_top, "models"), "",
"Accuracy", 2, subplot_title_size, axis_label_size, axis_tick_size)
p1 <- out[[1]]
p2 <- out[[2]]
out <- plot_on_grid(debrujin_trainDataF1, debrujin_testDataF1, "(1) F1 score on the validation data",
paste("Boxplots for top", num_top, "models"), "(2) F1 scores on test data",
paste("F1 values for top", num_top, "models"), "",
"F1 score", 2, subplot_title_size, axis_label_size, axis_tick_size)
p3 <- out[[1]]
p4 <- out[[2]]
title = paste("(A) Classification via SW aligned Debrujin motifs", sep="")
grid_title <- textGrob(title, gp = gpar(fontsize = plot_title_size, fontface = 'bold'))
plot1_bacc <- grid.arrange(grid_title, arrangeGrob(p1, p2, nrow=1, ncol=2), nrow=2, heights=c(0.5, 10))
plot1_f1 <- grid.arrange(grid_title, arrangeGrob(p3, p4, nrow=1, ncol=2), nrow=2, heights=c(0.5, 10))
out <- process_data(trainData2, "train", num_top)
blast_trainDataBacc <- out[[1]]
blast_trainDataF1 <- out[[2]]
out <- process_data(testData2, "test", num_top)
blast_testDataBacc <- out[[1]]
blast_testDataF1 <- out[[2]]
# source("plotResults.R")
out <- plot_on_grid(blast_trainDataBacc, blast_testDataBacc, "(1) Balanced accuracy on the validation data",
paste("Boxplots for top", num_top, "models"), "(1) Balanced accuracy on test data",
paste("Balanced accuracy for top", num_top, "models"), "",
"Accuracy", 2, subplot_title_size, axis_label_size, axis_tick_size)
p5 <- out[[1]]
p6 <- out[[2]]
out <- plot_on_grid(blast_trainDataF1, blast_testDataF1, "(1) F1 score on the validation data",
paste("Boxplots for top", num_top, "models"), "(2) F1 scores on test data",
paste("F1 values for top", num_top, "models"), "",
"F1 score", 2, subplot_title_size, axis_label_size, axis_tick_size)
p7 <- out[[1]]
p8 <- out[[2]]
title = paste("(B) Classification via BLAST aligned Debrujin motifs", sep="")
grid_title <- textGrob(title, gp = gpar(fontsize = plot_title_size, fontface = 'bold'))
plot2_bacc <- grid.arrange(grid_title, arrangeGrob(p5, p6, nrow=1, ncol=2), nrow=2, heights=c(0.5, 10))
plot2_f1 <- grid.arrange(grid_title, arrangeGrob(p7, p8, nrow=1, ncol=2), nrow=2, heights=c(0.5, 10))
out <- process_data(trainData3, "train", num_top)
rand_trainDataBacc <- out[[1]]
rand_trainDataF1 <- out[[2]]
out <- process_data(testData3, "test", num_top)
rand_testDataBacc <- out[[1]]
rand_testDataF1 <- out[[2]]
# source("plotResults.R")
out <- plot_on_grid(rand_trainDataBacc, rand_testDataBacc, "(1) Balanced accuracy on the validation data",
paste("Boxplots for top", num_top, "models"), "(2) Balanced accuracy on test data",
paste("Balanced accuracy for top", num_top, "models"), "",
"Accuracy", 2, subplot_title_size, axis_label_size, axis_tick_size)
p9 <- out[[1]]
p10 <- out[[2]]
out <- plot_on_grid(rand_trainDataF1, rand_testDataF1, "(1) F1 score on the validation data",
paste("Boxplots for top", num_top, "models"), "(2) F1 scores on test data",
paste("F1 values for top", num_top, "models"), "",
"F1 score", 2, subplot_title_size, axis_label_size, axis_tick_size)
p11 <- out[[1]]
p12 <- out[[2]]
title = paste("(C) Classification via randomly sampled motifs (average of 100 trials)", sep="")
grid_title <- textGrob(title, gp = gpar(fontsize = plot_title_size, fontface = 'bold'))
plot3_bacc <- grid.arrange(grid_title, arrangeGrob(p9, p10, nrow=1, ncol=2), nrow=2, heights=c(0.5, 10))
plot3_f1 <- grid.arrange(grid_title, arrangeGrob(p11, p12, nrow=1, ncol=2), nrow=2, heights=c(0.5, 10))
FinalPlot_bacc <- grid.arrange(plot1_bacc, plot2_bacc, plot3_bacc, nrow=3)
FinalPLot_f1 <- grid.arrange(plot1_f1, plot2_f1, plot3_f1, nrow=3)
# Save the plot on disk
ggsave(file.path(out_dir, "TIMP_ClassBacc.png"), FinalPlot_bacc, dpi=360, height=18,
width=14, units="in")
ggsave(file.path(out_dir, "TIMP_ClassF1.png"), FinalPLot_f1, dpi=360, height=18,
width=14, units="in")
}
trainData1 <- read.csv2(file = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/debrujin_runs/train_results.csv",
stringsAsFactors = FALSE, sep=",")
testData1 <- read.csv2(file = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/debrujin_runs/test_results.csv",
stringsAsFactors = FALSE, sep=",")
trainData2 <- read.csv2(file = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/debrujin_blast/train_results.csv",
stringsAsFactors = FALSE, sep=",")
testData2 <- read.csv2(file = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/debrujin_blast/test_results.csv",
stringsAsFactors = FALSE, sep=",")
trainData3 <- read.csv2(file = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/random100_avg/train_results.csv",
stringsAsFactors = FALSE, sep=",")
testData3 <- read.csv2(file = "/Users/schmuck/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/random100_avg/test_results.csv",
stringsAsFactors = FALSE, sep=",")
out_dir = getwd()
drawPlots(trainData1, testData1, trainData2, testData2, trainData3, testData3, out_dir, "TimpClassificationResults.png", 10)
setwd("~/Library/CloudStorage/OneDrive-IndianaUniversity/PhD/TIMP_Classification/ClassificationPipeline")
path = getwd()
setwd(file.path(path))
base_path = dirname(path)
already_running = "no"
result_dir_name = "test_results"
input_file_name = "308_full.csv"
upsample = "FALSE"
out_dir = file.path(base_path, result_dir_name)
if ( (dir.exists(out_dir)) && (already_running == "no") ){
time_stamp = format(Sys.time(), "%m_%d_%H-%m-%S")
new_name = paste(out_dir, "_old_", time_stamp, sep="")
file.rename(out_dir, new_name)
dir.create(out_dir)
} else if ( !(dir.exists(out_dir)) && (already_running == "no") ){
dir.create(out_dir)
}
print(paste("Started execution on:", Sys.time()))
print("###################################")
print("1 Install packages")
print("###################################")
source("InstallMissingPackages.R")
source("visualizeTopResults.R")
source("visualizeAllResults.R")
availableModels = install_missing_packages(file.path("classModelList.txt"))
print("###################################")
print("2 READ/COMBINE DATA")
print("###################################")
source("DataIO.R")
out <- load_data(file.path(base_path, "data", input_file_name), upsample)
train_data <- out[[1]]
test_data <- out[[2]]
test_data$target <- as.factor(test_data$target)
